Lab 1

The first part of this tutorial is from https://netbeans.org/kb/docs/java/quickstart.html 

To start choose:  AppsAnyware/Netbeans 8.1 
NetBeans IDE Quick Start Guide
The following short tutorial takes you through some of the basic steps of developing a J2SE application in NetBeans IDE. 
This document is designed to get you going as quickly as possible. For more information on working with NetBeans IDE, see the Documentation on the NetBeans website.
Setting Up a Project
1.	Start NetBeans IDE (AppsAnyware/Netbeans 8.1).
2.	In the IDE, choose File > New Project (Ctrl-Shift-N), as shown in the figure below. 
3.	In the New Project wizard, expand the Java category and select Java Application as shown in the figure below. Then click Next. 
4.	In the Name and Location page of the wizard, do the following (as shown in the figure below): 
•	In the Project Name field, type HelloWorldAppl; 
•	Leave the Use Dedicated Folder for Storing Libraries checkbox unselected; 
•	In the Create Main Class field you will see: helloworldappl.HelloWorldAppl. 

* Pay attention that the path in “Project Location” and “Project Folder” fields will be different for you (you should work on n: drive)
5. Click Finish. 
The project is created and opened in the IDE. You should see the following components: 
•	The Projects window, which contains a tree view of the components of the project, including source files, libraries that your code depends on, and so on. 
•	The Source Editor window with a file called HelloWorldAppl opened. 
•	The Navigator window, which you can use to quickly navigate between elements within the selected class. 
•	The Tasks window, which lists compilation errors as well other tasks that are marked with keywords such as XXX and TODO.

Adding Code to the Generated Source File
Because you have left the Create Main Class checkbox selected in the New Project wizard, the IDE has created a skeleton class for you. You can add the "Hello World!" message to the skeleton code by replacing the line: 
            // TODO code application logic here
with the line:              
System.out.println("Hello World!");  
Save the change by choosing File > Save.
The file should look something like the following:
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package helloworldappl;
/**
 * @author ‘your name here’
 */
public class HelloWorldAppl {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
            System.out.println("Hello World!");
    }

}

Compiling and Running the Program
Because of the IDE's Compile on Save feature, you do not have to manually compile your project in order to run it in the IDE. When you save a Java source file, the IDE automatically compiles it.

To run the program:
•	Choose Run > Run Project (HelloWorldAppl)   F6. 
The Output window opens and displays output similar to what you see in the above figure.
Congratulations! Your program works! 
If there are compilation errors, they are marked with red glyphs in the left and right margins of the Source Editor. The glyphs in the left margin indicate errors for the corresponding lines and the glyphs in the right margin show all of the areas of the file that have errors, including errors in lines that are not visible. You can mouse over an error mark to get a description of the error. You can click a glyph in the right margin to jump to the line with the error. 
Building and Deploying the Application 
Once you have written and test run your application, you can use the Clean and Build command to build your application for deployment. When you use the Clean and Build command, the IDE runs a build script that performs the following tasks:
•	Deletes any previously compiled files and other build outputs. 
•	Recompiles the application and builds a JAR file containing the compiled files. 
To build your application: 
•	Choose Run > Clean and Build Project (HelloWorldAppl)   Shift-F11 
You can view the build outputs by opening the Files window and expanding the HelloWorldAppl node. The compiled bytecode file HelloWorldAppl.class is within the build/classes/helloworldappl subnode. A deployable JAR file that contains the helloWorldApp.class is within the dist node.

For information on how to run the application from the command line of your operating system, see the "The "Hello World" Application" at (http://java.sun.com/docs/books/tutorial/getStarted/cupojava/index.html) lesson of the Java Tutorials. 
Editing Java Source Code
We’ll add a new class (LibClass) to your project (HelloWorldAppl) and will include an acrostic() method in it.
Creating a Java Package and Class File
1.	Right-click the project node and choose New > Java Class. Type LibClass as the name for the new class, select your package name (helloworldappl) in the Package: field, and click Finish. LibClass.java opens in the Source Editor.
2.	In LibClass.java, place the cursor on the line after the class declaration (public class LibClass{ ) . Type or paste in the code of the following method: 
 public static String acrostic(String[] args) {
        StringBuffer b = new StringBuffer();     // “b” is an object of  StringBuffer class
 /* StringBuffer is a Java class, it is like a String, but can be modified. At any point in time it contains some particular sequence of characters, but the length and content of the sequence can be changed through certain method calls.  */
       for (int i = 0;  i < args.length;  i++) {  	 // a loop to scan all elements of the array args[ ] 
           	if (args[i].length() > i) {	            	// if the length of the “i”th element is greater than “i” …
                b.append(args[i].charAt(i)); 	// append() is a method from StringBuffer class
            } 
		else {
                b.append('?');
            }
        }
        return  b.toString();  
// toString() is a method that returns a string representing the data in the object “b”
    }
3.	If the code you pasted in is not formatted correctly, press Alt-Shift-F to reformat the entire file.
4.	Press Ctrl-S to save the file.
Editing a Java File
1.	Select the HelloWorldAppl.java tab in the Source Editor. If it isn't already open, expand ‘your project name’ in the Projects window and double-click HelloWorldAppl.java (in the helloworldappl package).  
2.	To run the acrostic() method and display the result, add the following two statements in the main() method (erase the statement “System.out.println("Hello World!");”):

	String resultString = LibClass.acrostic(args);
	System.out.println("Result: " + resultString);

3.	Press Ctrl-S to save the file.
Compiling and Running the Project
Now we need to set the main class (in this case HelloWorldAppl), and the execution arguments so we can run our project.
Setting the Main Class and Execution Arguments
1.	Right-click the ‘your project node’ and choose Properties.
2.	Select the Run node in the dialog's left pane. 
3.	Enter: 
However we all feel zealous 
in the Arguments field, and click OK.
Running the Main Project
1.	Choose Run > Run Project (HelloWorldAppl)  F6 from the Run menu. Double-click the Output window to maximize it so you can see all the output. 
	Result: Hello 
(this is the acrostic of the phrase that was passed to the program as an argument (it picked the red characters from the entered phrase: However we all feel zealous). 
(A single acrostic is formed by the initial letters of the lines, a double acrostic is formed by the initial and final letters, and a triple acrostic is formed by the initial, middle, and final letters. What exactly is the acrostic in our case? To answer this question, see the contents of the acrostic(String[] args) method.)
2.	Select the Files window and expand your project folder. 
3.	To add one blank line before and after the result of your program (Result: Hello), simply change, in the Source Editor, the System.out.println( ) method (from the main() method) to:
	System.out.println("\n Result: " + resultString +”\n”); 
4.	Press F6 to run the program again. The program will be compiled and run again.
Now, go back to Setting the Main Class and Execution Arguments step and add to your arguments (append in the Arguments field): now!!! , so that your arguments list now is:
	However we all feel zealous now!!!
Notice that the above line will go to the array of strings args[ ] as:
	“However” will go into args[0];
	“we”   into args[1];
	“all”   into args[2];
	“feel”   into args[3];
	etc.
Run the main project again. Your output should be:
Result: Hello! 	(Note! - exclamation mark is added)
Go back to Setting the Main Class and Execution Arguments step and change the last argument to: now!! (erase the last exclamation mark) so that your arguments list now is:
	However we all feel zealous now!!
Run the main project again. Your output now is:
Result: Hello? (The exclamation mark (!) is changed to a question mark (?))
The exclamation mark is changed with a question mark - why?
(Go to the LibClass.java to see the content of the acrostic(String[] args) method.
Now, if you still have time, change the acrostic( ) method, so that it processes the strings from the last to the first one (e.g., gets the last letter from the last string; the second from the last letter from the one before the last string; the third from the last letter from the second to the last string; and so on (until the first string is processed).  Run the modified program to see the result.